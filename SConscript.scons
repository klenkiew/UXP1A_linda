# find files recursively
def find_files(directory='.', pattern='*'):
    for root, dirs, files in os.walk(directory):
        for basename in files:
            filename = os.path.join(root, basename)
            yield env.Glob(filename, pattern)


# MAGIC SEQUENCE: win32 encoding problems
import sys, os
reload(sys)
sys.setdefaultencoding('utf8')
# END OF MAGIC SEQUENCE
import os.path as path
from sys import platform

linux_boost_prefix = "~/boost_1_65_1"


# boost prefix depending on OS
boost_prefix = linux_boost_prefix
    
# boost's libs dir
boost_libs = path.join(boost_prefix, "libs")

# environment prep
env = Environment()
env.Prepend(CPPPATH = [boost_prefix, ".."], LIBPATH=[boost_libs, "."])
env.Append(CXXFLAGS='-std=c++14 -pthread -DBOOST_LOG_DYN_LINK')
env.Repository(path.join("..", "include"))

# multithread compilation - problems on windows
if platform != "win32":
    import multiprocessing
    num_cpu = multiprocessing.cpu_count()
    env.SetOption('num_jobs', num_cpu)

# libraries to link
link_libs = ['boost_log', 'pthread', 'boost_system', 'boost_filesystem', 'rt']

# app's lib prep
app_lib_src = list(find_files(path.join("src", "library_src"), "*.cpp"))
env.StaticLibrary("appLib", app_lib_src)

# main executing program prep
app_src = env.Glob(path.join("src", "*.cpp"))
app = env.Program(path.join("..", "app"), app_src, LIBS='appLib')

# tests preparation
tests_files = [env.Glob(path.join("tests_src", "unit_tests", "*", "*.cpp")),
                        path.join("tests_src", "unit_tests", "main.cpp")]
tests = env.Program(path.join("..", "tests"), tests_files,
                    LIBS = ['appLib'] + link_libs)

# integration tests
integration_tests_files = [env.Glob(path.join("tests_src", "integration_tests", "*", "*.cpp")),
                                    path.join("tests_src", "integration_tests", "main.cpp")]
integration_tests = env.Program(path.join("..", "integration_tests"), integration_tests_files,
                    LIBS = ['appLib'] + link_libs)

# "$ scons" default build
env.Default(app, tests, integration_tests)